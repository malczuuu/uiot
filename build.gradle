plugins {
    id("net.nemerosa.versioning") version "${versioningPlugin}" apply false
    id("org.springframework.boot") version "${springBootPlugin}" apply false
    id("io.spring.dependency-management") version "${dependencyManagementPlugin}" apply false
    id("com.diffplug.spotless") version "${spotlessPlugin}" apply false
}

subprojects {
    apply plugin: "java"
    apply plugin: "net.nemerosa.versioning"
    apply plugin: "com.diffplug.spotless"

    group = "io.github.malczuuu"
    version = (versioning.info.tag ?: "${versioning.info.lastTag}-${versioning.info.build}") + (versioning.info.dirty ? "-dirty" : "")

    repositories {
        mavenCentral()
        maven { url = "https://jitpack.io" }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    spotless {
        format "misc", {
            target "*.gradle", ".gitattributes", ".gitignore"

            trimTrailingWhitespace()
            leadingTabsToSpaces(4)
            endWithNewline()
        }

        format "yaml", {
            target "**/*.yml", "**/*.yaml"

            trimTrailingWhitespace()
            leadingTabsToSpaces(2)
            endWithNewline()
        }

        java {
            target "src/**/*.java"

            googleJavaFormat("${googleJavaFormatVersion}")
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.compilerArgs += ["-parameters"]
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes "Implementation-Version": project.version
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    /**
     * Scripts that build Docker image require that there's only one jar.
     */
    pluginManager.withPlugin("org.springframework.boot") {
        tasks.withType(Jar).configureEach {
            if (name != "bootJar") {
                enabled = false
            }
        }
    }
}
