name: Build & Push Docker Images

on:
  push:
    tags: [ "*" ]

jobs:
  build-jars:
    name: Build all service jars
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Upload service jars
        uses: actions/upload-artifact@v4
        with:
          name: service-jars
          path: uiot-service-*/build/libs/uiot-service-*.jar
          retention-days: 1
          if-no-files-found: error

  docker:
    name: Dockerize [${{ matrix.service }}]
    runs-on: ubuntu-latest
    needs: build-jars
    strategy:
      matrix:
        service:
          - uiot-service-accounting
          - uiot-service-connectivity
          - uiot-service-history
          - uiot-service-rooms
          - uiot-service-rules
          - uiot-service-telemetry
          - uiot-service-things
    steps:
      - uses: actions/checkout@v4

      - name: Download service jars
        uses: actions/download-artifact@v4
        with:
          name: service-jars
          path: .

      # - name: Prepare jar in service root
      #   run: |
      #     set -euo pipefail
      #     # Copy the built (non -plain) jar for this service to the module root so Dockerfile COPY works.
      #     jar_source=$(ls ${{ matrix.service }}/build/libs/${{ matrix.service }}-*.jar | head -n1)
      #     echo "Using jar: $jar_source"
      #     cp "$jar_source" ${{ matrix.service }}/
      #     ls -l ${{ matrix.service }}/ | grep .jar || (echo "Jar not found in service root" && exit 1)

      - name: Log in to Docker Hub
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
